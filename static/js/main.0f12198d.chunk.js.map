{"version":3,"sources":["Header.js","Form.js","Results.js","Footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","modules","activeClass","to","spy","smooth","offset","duration","Form","props","id","action","onClick","handleClick","Results","displaySpellName","displaySpellEffect","handleNewSpell","Footer","href","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","_ref","asyncToGenerator","regenerator_default","mark","_callee","event","userSelection","subArray","randomSpell","wrap","_context","prev","next","preventDefault","target","state","allSpells","filter","spell","type","setState","userArray","showResults","Math","floor","random","length","randomSpellName","randomSpellEffect","effect","stop","_x","apply","arguments","newRandomSpell","_this2","axios","method","url","responseType","params","key","format","then","response","data","src_Header_0","src_Form_0","src_Results_0","src_Footer_0","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0f12198d.chunk.js","sourcesContent":["import React from 'react';\nimport './Header.css';\nimport { Link } from \"react-scroll\";\n\n\n// My header is a simple component because it doesn't need to hold state. It doesn't give or take any information. \nconst Header = () => {\n    return (\n        <header>\n            <div className=\"wrapper\">\n                <h1>Ask Peeves</h1>\n                <p>Need a spell?</p>\n                <Link // For smooth scroll\n                    activeClass=\"active\"\n                    to=\"form\" \n                    spy={true}\n                    smooth={true}\n                    offset={0}\n                    duration={1200}>\n                    <button>\n                        <i className=\"fas fa-bolt\"></i>\n                        <span className=\"visuallyHidden\">Scroll to next section</span>\n                    </button>\n                </Link>\n            </div>\n        </header>\n    )\n}\n\nexport default Header; ","import React from 'react';\nimport './Form.css';\nimport { Link } from \"react-scroll\";\n\n// My form is also a simple component because it doesn't need state. It does pass information back to App.js through props though! \nconst Form = (props) => {\n    return (\n        <form id=\"form\" action=\"\">\n            <div className=\"wrapper\">\n                <h2>Where are you?</h2>\n                <div className=\"options\">\n                    <Link // <Link>s are all for smooth scrolling\n                        activeClass=\"active\"\n                        to=\"results\"\n                        spy={true}\n                        smooth={true}\n                        offset={0}\n                        duration={1200}>\n                        <button className=\"gold\" id=\"Charm\" onClick={props.handleClick}>The Great Hall</button>\n                    </Link>\n                    <Link\n                        activeClass=\"active\"\n                        to=\"results\"\n                        spy={true}\n                        smooth={true}\n                        offset={0}\n                        duration={1200}>\n                        <button className=\"gold\" id=\"Spell\" onClick={props.handleClick}>The Burrow</button>\n                    </Link>\n                    <Link\n                        activeClass=\"active\"\n                        to=\"results\"\n                        spy={true}\n                        smooth={true}\n                        offset={0}\n                        duration={1200}>\n                        <button className=\"gold\" id=\"Curse\" onClick={props.handleClick}>Knockturn Alley</button>\n                    </Link>\n                    <Link\n                        activeClass=\"active\"\n                        to=\"results\"\n                        spy={true}\n                        smooth={true}\n                        offset={0}\n                        duration={1200}>\n                        <button className=\"gold\" id=\"Jinx\" onClick={props.handleClick}>Forbidden Forest</button> {/* Just a note, there are only two items with a type of \"Jinx\" so it will often look like you're hitting the button and it's not working, but it's just because there are only two options that it is randomly selecting from. */}\n                    </Link>\n                </div> {/* End of .options div */}\n            </div> {/* End of .wrapper div */}\n        </form>\n    )\n}\n\nexport default Form;","import React from 'react';\nimport './Results.css';\nimport { Link } from \"react-scroll\";\n\n\n// My Results section is also a simple component because it doesn't need state. It does receive information from App.js through props though! \nconst Results = (props) => {\n    return (\n        <section className=\"results\" id=\"results\">\n            <div className=\"wrapper\">\n                <div className=\"resultsBox\">\n                    <h2>Why not try:</h2>\n                    <p className=\"randomSpellName\">{props.displaySpellName}</p>\n                    <p className=\"randomSpellEffect\">{props.displaySpellEffect}</p>\n                    <div className=\"links\">\n                        <div className=\"newSpell\">\n                            <h3>Not quite what you're looking for?</h3>\n                            <button className=\"gold newSpellButton\" onClick={props.handleNewSpell}>Get a new spell</button>\n                        </div>\n                        <div className=\"newPlace\">\n                            <h3>Going somewhere else?</h3>\n                            <Link\n                                activeClass=\"active\"\n                                to=\"form\"\n                                spy={true}\n                                smooth={true}\n                                offset={0}\n                                duration={1200}>\n                                <button className=\"gold\">Choose a new place</button>\n                            </Link>\n                        </div>\n                    </div> {/* End of .links div */}\n                </div> {/* End of .resultsBox div */}\n            </div> {/* End of .wrapper div */}\n        </section>\n    )\n}\n\n\nexport default Results;","import React from 'react';\nimport './Footer.css';\n\n// My footer is a simple component because it doesn't need to hold state. It doesn't give or take any information.\nconst Footer = () => {\n    return (\n        <footer>\n            <div className=\"wrapper\">\n                <p>Brought to you by <a href=\"http://www.morganlockhart.com\">Morgan Lockhart</a>, HackerYou 2019, using the <a href=\"https://www.potterapi.com/\">Harry Potter API</a>. Thanks <a href=\"https://twitter.com/_kristenspencer\">Kristen</a>!</p>\n            </div>\n        </footer>\n    )\n}\n\nexport default Footer;","import React, { Component } from 'react';\nimport './App.css';\nimport Header from './Header.js';\nimport Form from './Form.js';\nimport Results from './Results.js';\nimport Footer from './Footer.js';\nimport axios from 'axios';\n\nconst apiKey = `$2a$10$S62Y1Ef47zvjTRLZdbVEcO33PQQotdJ.vQIFCmACGySFL0trAhm..`;\nconst apiUrl = `https://www.potterapi.com/v1/spells/`;\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      allSpells: [],\n      userArray: [],\n      showResults: false,\n      randomSpellName: '',\n      randomSpellEffect: ''\n    }\n  }\n\n  componentDidMount() {\n\n    // Axios call is made and returns list of all spells data\n    axios({\n      method: 'get',\n      url: apiUrl,\n      responseType: 'json',\n      params: {\n        key: apiKey,\n        format: 'json',\n      }\n    }).then(response => {\n\n      // To simplify response, saved array of spells to it's own variable\n      const allSpells = response.data;\n\n      // Saved array of all spells to state\n      this.setState({\n        allSpells: allSpells\n      })\n    })\n  }\n\n  // Function for when a user clicks on a location button. I used async because I want to filter the spells, set state with that pared down list, then get a random spell from that state, and set that in a new state.\n  handleClick = async (event) => {\n    event.preventDefault();\n\n    // Each button has a unique id that is used to filter the spells by type\n    let userSelection = event.target.id;\n    let subArray = this.state.allSpells.filter(spell => {\n      return spell.type === userSelection;\n    })\n    // userArray is the subset of spells that are appropriate for the location the user selected.\n    await this.setState({\n      userArray: subArray,\n      showResults: true\n    })\n\n    // I then want to return one random spell from that userArray. This step waits until userArray state has been set, then continues to set a random spell and it's corresponding effect. \n    let randomSpell = this.state.userArray[Math.floor(Math.random() * this.state.userArray.length)];\n    this.setState({\n      randomSpellName: randomSpell.spell,\n      randomSpellEffect: randomSpell.effect\n    })\n  }\n\n  // Function for if a user wants to get a new spell in the same category, it does not re-filter, it just finds a new random spell, so it only updates state of randomSpellName and randomSpellEffect.\n  handleNewSpell = (event) => {\n    event.preventDefault();\n    let newRandomSpell = this.state.userArray[Math.floor(Math.random() * this.state.userArray.length)];\n    this.setState({\n      randomSpellName: newRandomSpell.spell,\n      randomSpellEffect: newRandomSpell.effect\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <main>\n\n          {/* Form uses the handleClick function that is sent to it from App.js, then sends information back up */}\n          <Form\n            handleClick={this.handleClick}\n          />\n\n          {/* Results receives both a function and information from the state of App.js and also sends information back up to App.js. It is also only visible once a user has interacted with the form! */}\n          {this.state.showResults ? <Results\n            showResults={this.state.showResults}\n            displaySpellName={this.state.randomSpellName}\n            displaySpellEffect={this.state.randomSpellEffect}\n            handleNewSpell={this.handleNewSpell}\n          /> : null}\n          \n\n        </main>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}